* My personal Emacs configuration
** Screen shots
   #+HTML: <img src="./screenshots/1.jpg" alt="img" title="my emacs" width="100%"/>

** Installation
*** Step1: Install Emacs
**** Install Emacs-mac on Mac
     - *Method 1*: Use brew cask(Recommended)
       #+BEGIN_SRC shell
         brew tap railwaycat/emacsmacport
         brew cask install emacs-mac-spacemacs-icon
       #+END_SRC

     - *Method 2*: Just brew, need compiling. (more customization)
       #+BEGIN_SRC shell
         brew tap railwaycat/emacsmacport
         rm -r /Applications/Emacs.app
         brew install emacs-mac --with-spacemacs-icon --with-gnutls --with-natural-title-bar
         # create alias in /Applications
         ln -Fs `sudo find /usr/local -name "Emacs.app"` /Applications/Emacs.app
       #+END_SRC

       #+BEGIN_QUOTE
       Notes: (just for method 2)
       1. natural-title-bar usage [[https://github.com/railwaycat/homebrew-emacsmacport/wiki/Natural-Title-Bar][here]].
       2. Solution to incoming network connection:
          Codesign your Emacs.app. Instructions over [[http://apple.stackexchange.com/questions/3271/how-to-get-rid-of-firewall-accept-incoming-connections-dialog/170566][here]].
          ~codesign --deep --force --verbose --sign ztlevi /usr/local/opt/emacs-mac/Emacs.app~
       #+END_QUOTE
**** Install Emacs on Linux
     #+BEGIN_SRC shell
       # Ubuntu
       sudo apt-get insatll emacs
       # Arch
       sudo pacman -S emacs
     #+END_SRC

*** Step2: Install Spacemacs
    #+BEGIN_SRC shell
      rm -r ~/.emacs.d
      git clone https://github.com/syl20bnr/spacemacs -b develop ~/.emacs.d
    #+END_SRC

*** Step3: Configuration and Dependencies
    This Emacs configuration is written for Emacs 25.1+ on Mac OS X 10.11+ and Linux Arch. Windows users may need to tweak the config for themselves.

    1. Clone my configuration:
       #+BEGIN_SRC shell
         git clone --recurse-submodules -j8 https://github.com/ztlevi/spacemacs-config.git ~/.spacemacs.d
       #+END_SRC
    2. Install all-the-icons fonts by ~M-x all-the-icons-install-fonts~. I'm using /Operator Mono Lig/ font(supports ligatures), you could change it under ~dotspacemacs-default-font~.
       Download icons-in-terminal font with ~https://raw.githubusercontent.com/sebastiencs/icons-in-terminal/master/build/icons-in-terminal.ttf~ and then manually install it to support =company-box=.

    3. Dependencies needed
       - Install dependencies including search tools, utils, and linters.
         #+BEGIN_SRC shell
           # search tool
           brew install ripgrep grep
           # utils
           brew install hub watchman gpg2 coreutils ctags gnu-tar
           # linter
           brew install shellcheck aspell hadolint
         #+END_SRC

         Note: for windows users, [[http://aspell.net/win32/][aspell]] is used instead. ripgrep can be installed via [[https://chocolatey.org/][choco]]
       - npm
         #+BEGIN_SRC shell
           npm install -g prettier js-beautify live-server import-js
         #+END_SRC
       - pip: =autopep8=, =importmagic=, =ipython=
         #+BEGIN_SRC shell
           pip3 install ipython pylint autopep8 importmagic epc
         #+END_SRC
       - go: =go-langserver=, =gocode=, =gogetdoc=, =godef=, =godoctor=
         #+BEGIN_SRC shell
           brew install go

           # lsp
           go get -u github.com/sourcegraph/go-langserver

           go get -u -v github.com/nsf/gocode
           go get -u -v github.com/rogpeppe/godef
           go get -u -v golang.org/x/tools/cmd/guru
           go get -u -v golang.org/x/tools/cmd/gorename
           go get -u -v golang.org/x/tools/cmd/goimports
           go get -u -v github.com/zmb3/gogetdoc
           go get -u -v github.com/cweill/gotests/...
           go get -u github.com/haya14busa/gopkgs/cmd/gopkgs
           go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct
           go get -u github.com/josharian/impl

           go get -u -v github.com/alecthomas/gometalinter
           gometalinter --install --update

           go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
         #+END_SRC
    4. Language Server Protocol: Install the [[https://langserver.org/][lsp]] for your languages. A few examples are listed below.
       #+BEGIN_SRC shell
         # Javascript
         npm i -g typescript javascript-typescript-langserver

         # Vue
         npm install vue-language-server -g

         # python
         # pyls-mypy is a type integration for Python
         pip3 install 'python-language-server[all]' pyls-isort

         # cquery for c++
         brew tap twlz0ne/homebrew-cquery
         brew install cquery
       #+END_SRC
    5. According to the discussion [h[https://emacs-china.org/t/topic/6453/6][here]], the following codes will speed up Emacs GUI startup time.
       #+BEGIN_SRC bash
         defaults write org.gnu.Emacs Emacs.ToolBar -string no
         defaults write org.gnu.Emacs Emacs.ScrollBar -string no
         defaults write org.gnu.Emacs Emacs.MenuBar -string no
       #+END_SRC

** Usage
   1. If you want to map *jk* as evil escape key, add the following line in ~customize.el~ -> ~custom-set-variables~ and delete ~evil-escape~ package in ~init.el~ -> ~dotspacemacs-excluded-packages~.

      #+BEGIN_SRC emacs lisp
      '(evil-escape-delay 0.2)
      '(evil-escape-key-sequence "jk")
      #+END_SRC

   2. ~SPC f g (rgrep)~ can help to search and apply the file masks (~*.py~).

   3. Git-Link: You can use the universal argument ~SPC u~ with ~M-x spacemacs/git-link (SPC g l l)~ to select a remote repository.
      Local settings are managed via the repository's git configuration. They can be set via: ~git config --local --add git-link.remote upstream~
      Local settings have precedence over global settings.
      ~git-link.remote~: Name of the remote to link to.
      ~git-link.branch~: Name of the remote branch to link to.

   4. Cquery Project setup [[https://github.com/cquery-project/cquery/wiki/compile_commands.json][compile_commands.json]] (Best). Remember to copy/symlink it to the project root.

   5. Use ~counsel-etags-find-tag-at-point~ (~g F~) to choose the etags directory and find candidates.

   6. Atomic Chrome is very useful to edit the textarea in Chrome. You will need to install the Chrome extension [[https://chrome.google.com/webstore/detail/atomic-chrome/lhaoghhllmiaaagaffababmkdllgfcmc][here]].

   7. Prodigy is great to define your own services and fire up the service easily. Custom setting is under function *ztlevi-misc/post-init-prodigy*

      Note: If you are on a Mac, disable nap mode for Emacs, otherwise requests will be very slow when Emacs enters nap mode:
      #+BEGIN_SRC shell
        defaults write org.gnu.Emacs NSAppSleepDisabled -bool YES
      #+END_SRC

   8. To change the home page banner, configure the setting in ~dotspacemacs-startup-banner '"~/.spacemacs.d/icons/banner.png"~.

   9. Encrypt org entries by using ~C-c C-c~ to set ~secret~ tag for the entry. Save the file and input the passcode. Then the entry will be encrypted. Decrypt the entry by using ~org-decrypt-entry~.

** What's the highlight of this configuration
   1. It's a highly customize optimized Spacemacs configuration, it's relied on the *develop* branch of the officially Spacemacs.
   2. I prefer to the =Ivy= completion interface, so I removed many helm related packages but keep the =helm-ag= package. The =counsel-ag= counterpart is not powerful as =helm-ag=.
   3. I also removed some packages I don't have any chance to use. The complete lists are in the exclude section of the =init.el= file.
   4. I also exclude the =Spaceline= package, cause it's easy to frozen the Emacs with this package enabled. So I create my own mode line configuration based =Spaceline=.
   5. The =Swiper= package sometimes frozen the Emacs UI only when you split the window. You could use `pkill -SIGUSR2 -i emacs` command line to rescue.
